{
  "base": "<script>\n  import { TCheckbox } from 'tdesign-svelte';\n  \n</script>\n\n<div style=\"display: inline-flex;gap: 16px\">\n  <TCheckbox>未选中项</TCheckbox>\n  <TCheckbox>未选悬停项</TCheckbox>\n  <TCheckbox checked=\"true\">选中项</TCheckbox>\n  <TCheckbox disabled>未选禁用项</TCheckbox>\n  <TCheckbox disabled checked=\"true\">选中禁用项</TCheckbox>\n</div>",
  "controlled": "<script>\n  import { TCheckbox, TCheckboxGroup } from 'tdesign-svelte';\n\n  let checked1 = true;\n  let checked2 = [1];\n\n  const onChange1 = (val) => {\n    console.log('change:', checked1, val);\n  };\n  const onChange2 = (value) => {\n    console.log('change: ', value);\n  };\n\n  const options = [\n    { label: '全选', checkAll: true },\n    { value: 1, label: '受控模式选项一' },\n    { value: 2, label: '受控模式选项二' },\n    { value: 3, label: '受控模式选项三' },\n  ];\n</script>\n\n<div style=\"display: flex;flex-direction:column;gap: 24px\">\n  <div style=\"display: inline-flex;gap: 16px\">\n    <TCheckbox bind:checked={checked1} on:change={onChange1}>语法糖（bind）</TCheckbox>\n    <TCheckbox checked={true} readonly on:change={onChange2}>受控属性</TCheckbox>\n    <TCheckbox checked={false} on:change={onChange2}>非受控属性</TCheckbox>\n  </div>\n  <TCheckboxGroup value={checked2} readonly {options} on:change={onChange2} />\n</div>",
  "group": "<script>\n  import { TCheckboxGroup, TCheckbox } from 'tdesign-svelte';\n\n  let value1 = ['选项一'];\n  let value2 = ['选项一', '选项二', '选项三'];\n  const handleSelectAll = (e) => {\n    value1 = e.detail ? ['选项一', '选项二', '选项三'] : [];\n  };\n  const options1 = [\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    { value: '选项一', label: '选项一' },\n    { value: '选项二', label: '选项二' },\n    { value: '选项三', label: '选项三' },\n  ];\n  let indeterminate = false;\n  $: indeterminate = options1.length > value1.length && value1.length > 0;\n  $: checkAll = options1.length === value1.length;\n\n  const options2 = [\n    { label: '全选', checkAll: true },\n    // html attribute: title, hover to see more label text info\n    { value: '选项一', label: '选项一', title: '选项一' },\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    { value: '选项二', label: '选项二' },\n    { value: '选项三', label: '选项三' },\n  ];\n</script>\n\n<div style=\"display: flex;flex-direction: column;gap: 16px\">\n  <p>方式一：业务侧自定义全选功能。选中值: {value1}</p>\n  <TCheckbox checked={checkAll} {indeterminate} on:change={handleSelectAll}>全选</TCheckbox>\n  <TCheckboxGroup options={options1} bind:value={value1} name=\"city\"></TCheckboxGroup>\n\n  <br />\n  <p>方式三：组件内置全选功能，使用 `options` 定义选项。选中值: {value2}</p>\n  <TCheckboxGroup bind:value={value2} options={options2} />\n</div>",
  "link": "<script>\n  import { TCheckboxGroup, TButton } from 'tdesign-svelte';\n\n  let value = ['选项二'];\n\n  function resetValue() {\n    value = ['选项二'];\n  }\n</script>\n\n<div style=\"display: flex;flex-direction: column;gap: 16px\">\n  <div>\n    <p>选中值: {value}</p>\n  </div>\n  <div>\n    <TCheckboxGroup bind:value options={['选项一', '选项二', '选项三']} name=\"city\"></TCheckboxGroup>\n  </div>\n  <div>\n    <TButton size=\"small\" on:click={resetValue}>重置</TButton>\n  </div>\n</div>"
}
